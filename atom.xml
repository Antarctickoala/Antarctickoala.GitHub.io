<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://antarctickoala.github.io</id>
    <title>Koala&apos;s Blog</title>
    <updated>2021-10-26T12:17:57.672Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://antarctickoala.github.io"/>
    <link rel="self" href="https://antarctickoala.github.io/atom.xml"/>
    <subtitle>一个浅尝辄止的混子</subtitle>
    <logo>https://antarctickoala.github.io/images/avatar.png</logo>
    <icon>https://antarctickoala.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Koala&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[在Clion中使用PDCurses]]></title>
        <id>https://antarctickoala.github.io/post/zai-clion-zhong-shi-yong-pdcurses/</id>
        <link href="https://antarctickoala.github.io/post/zai-clion-zhong-shi-yong-pdcurses/">
        </link>
        <updated>2021-10-26T06:42:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="在clion中使用pdcurses">在Clion中使用PDCurses</h2>
<p>编译器使用mingw64，如图。</p>
<img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026134404.png" style="zoom:50%;" />
<p>下文中，小节1,2,3是通过链接编译后的二进制文件来引用PDCurses。而小节4中将会介绍直接引用源文件的方法。</p>
<h3 id="1下载解压并编译pdcurses">1.下载，解压并编译PDCurses</h3>
<p>在 <a href="https://sourceforge.net/projects/pdcurses/files/pdcurses/">这里</a> 下载 PDCurses-3.8.zip。下载后解压到某个文件夹下，这里以 D:\pkg 为例，如图。</p>
<img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026134827.png" style="zoom:80%;" />
<p>双击进入wincon文件夹，如图。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026135350.png" alt="" loading="lazy"></figure>
<p>在上方地址栏中输入cmd，按下回车键，打开命令提示符窗口。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026135647.png" alt="" loading="lazy"></figure>
<p>也可以直接打开cmd, cd到路径 D:\pkg\PDCurses-3.8\wincon.</p>
<figure data-type="image" tabindex="3"><img src="C:%5CUsers%5CYLW20%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211026135623103.png" alt="" loading="lazy"></figure>
<p>在cmd中，输入 set PDCURSES_SRCDIR=D:\pkg\PDCurses-3.8 ，并按下回车执行。</p>
<p>在cmd中，输入 set path=D:\ProgramFiles\mingw64\bin (你的编译器路径)，并按下回车执行。</p>
<p>在cmd中，输入 mingw32-make ，并按下回车执行。编译开始，等待编译完成。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026141006.png" alt="" loading="lazy"></figure>
<p>编译完成，如下图。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026141055.png" alt="" loading="lazy"></figure>
<p>此时可以看到wincon目录下多了很多后缀为 .o 的文件。<br>
<img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026144738.png" alt="" loading="lazy"></p>
<h3 id="2在clion中使用pdcurses">2.在Clion中使用PDCurses</h3>
<p>这个时候就可以打开clion了，创建一个C或者C++可执行工程。此处工程名为 curses_test。编辑源文件main.c，输入代码：</p>
<pre><code class="language-C">#include &lt;curses.h&gt;

int main() {
    initscr();
    printw(&quot;hello world!&quot;);
    refresh();
    getchar();
    return 0;
}
</code></pre>
<p>观察到错误，无法找到curses.h ，并且找不到相关函数。</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026144349.png" alt="" loading="lazy"></figure>
<p>从左侧导航栏中打开 CMakeLists.txt 文件，加入三行代码：</p>
<pre><code class="language-cmake">include_directories(&quot;D:/pkg/PDCurses-3.8&quot;)
find_library(S_LIBRARY pdcurses.a D:/pkg/PDCurses-3.8/wincon)
target_link_libraries(curses_test ${S_LIBRARY})
</code></pre>
<p>注意，第一行代码是 PDCurses-3.8 的路径。</p>
<p>第二行中，S_LIBRARY 是一个变量名，可以改变，第三行与第二行匹配即可。最后的路径就是PDCurses-3.8下的wincon。</p>
<p>第三行中，curses_test 应为工程的名称。</p>
<p>完成后，单击右上角的 Reload Changes。<img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026141958.png" alt="" loading="lazy"></p>
<p>此时，我们可以看见 main.c 不再报错。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026142706.png" alt="" loading="lazy"></figure>
<p>但是如果编译并运行程序，仍然会出错，如下图所示。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026144421.png" alt="" loading="lazy"></figure>
<p>clion默认程序在内置的控制台输出，我们需要将其更改为外置控制台(就是平常看到的“小黑框”)，才能正常使用PDCurses的各种功能。</p>
<p>在右上角选择 Edit Configurations... ，如图。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/Image%20113.png" alt="" loading="lazy"></figure>
<p>勾选 Run in external console，单击OK。</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/Image%20114.png" alt="" loading="lazy"></figure>
<p>再运行程序，成功。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026144440.png" alt="" loading="lazy"></figure>
<p>在 PDCurses-3.8\demos 文件夹下，有很多测试例程，可以把代码复制到 main.c 中测试效果。</p>
<h3 id="4不编译直接使用源文件">4.不编译直接使用源文件</h3>
<p>事实上，我们可以不事先编译下载好的源文件。讲 PDCurses-3.8 文件夹直接放在我们的工程目录下。如图，我们新建了一个叫 PDCurse_include_src 的工程~~(原本是想要命名为 PDCurses_include_src 的，结果创建工程时少打了一个's'，有点点不规范)~~。重命名 PDCurses-3.8 为 PDCurses_3.8_src 并且删去了其中大多数文件夹(这不是必须的，但是多数文件夹中的文件是我们用不到的)。将 PDCurses_3.8_src 文件夹放入工程的根目录下。</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/Antarctickoala/myBlogPcs/main/img/20211026200339.png" alt="" loading="lazy"></figure>
<p>重点是编辑CMakeLists.txt, 这里我们将所有可能用得上的 .c 文件全部写进 add_executable 中，这可能会有些繁琐，遇到类似的情况，我们可以用程序遍历.c文件并且生成这些字符串。</p>
<pre><code class="language-Cmake">cmake_minimum_required(VERSION 3.20)
project(PDCurse_include_src)

set(CMAKE_CXX_STANDARD 14)

add_executable(PDCurse_include_src main.c
        PDCurses_3.8_src/pdcurses/addch.c
        PDCurses_3.8_src/pdcurses/addchstr.c
        PDCurses_3.8_src/pdcurses/addstr.c
        PDCurses_3.8_src/pdcurses/attr.c
        PDCurses_3.8_src/pdcurses/beep.c
        PDCurses_3.8_src/pdcurses/bkgd.c
        PDCurses_3.8_src/pdcurses/border.c
        PDCurses_3.8_src/pdcurses/clear.c
        PDCurses_3.8_src/pdcurses/color.c
        PDCurses_3.8_src/pdcurses/debug.c
        PDCurses_3.8_src/pdcurses/delch.c
        PDCurses_3.8_src/pdcurses/deleteln.c
        PDCurses_3.8_src/pdcurses/getch.c
        PDCurses_3.8_src/pdcurses/getstr.c
        PDCurses_3.8_src/pdcurses/getyx.c
        PDCurses_3.8_src/pdcurses/inch.c
        PDCurses_3.8_src/pdcurses/inchstr.c
        PDCurses_3.8_src/pdcurses/initscr.c
        PDCurses_3.8_src/pdcurses/inopts.c
        PDCurses_3.8_src/pdcurses/insch.c
        PDCurses_3.8_src/pdcurses/insstr.c
        PDCurses_3.8_src/pdcurses/instr.c
        PDCurses_3.8_src/pdcurses/kernel.c
        PDCurses_3.8_src/pdcurses/keyname.c
        PDCurses_3.8_src/pdcurses/mouse.c
        PDCurses_3.8_src/pdcurses/move.c
        PDCurses_3.8_src/pdcurses/outopts.c
        PDCurses_3.8_src/pdcurses/overlay.c
        PDCurses_3.8_src/pdcurses/pad.c
        PDCurses_3.8_src/pdcurses/panel.c
        PDCurses_3.8_src/pdcurses/printw.c
        PDCurses_3.8_src/pdcurses/refresh.c
        PDCurses_3.8_src/pdcurses/scanw.c
        PDCurses_3.8_src/pdcurses/scroll.c
        PDCurses_3.8_src/pdcurses/scr_dump.c
        PDCurses_3.8_src/pdcurses/slk.c
        PDCurses_3.8_src/pdcurses/termattr.c
        PDCurses_3.8_src/pdcurses/touch.c
        PDCurses_3.8_src/pdcurses/util.c
        PDCurses_3.8_src/pdcurses/window.c
        PDCurses_3.8_src/wincon/pdcclip.c
        PDCurses_3.8_src/wincon/pdcdisp.c
        PDCurses_3.8_src/wincon/pdcgetsc.c
        PDCurses_3.8_src/wincon/pdckbd.c
        PDCurses_3.8_src/wincon/pdcscrn.c
        PDCurses_3.8_src/wincon/pdcsetsc.c
        PDCurses_3.8_src/wincon/pdcutil.c
        )
include_directories(&quot; PDCurses_3.8_src &quot;)
</code></pre>
<p>然后按照第3节的做法测试程序。单击运行程序后，相比于链接.o文件，这种做法会消耗更多时间在编译上。但是程序依然可以正常运行。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[New article]]></title>
        <id>https://antarctickoala.github.io/post/new-article/</id>
        <link href="https://antarctickoala.github.io/post/new-article/">
        </link>
        <updated>2021-10-26T04:43:40.000Z</updated>
        <content type="html"><![CDATA[<p>This is a new article.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://antarctickoala.github.io/post/hello-gridea/</id>
        <link href="https://antarctickoala.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>